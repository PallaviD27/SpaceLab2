# Transmitter Filter
# x = filter_tx(d, usf_filter, switch_graph), API definition 3.4.2
import numpy as np
import matplotlib.pyplot as plt

def filter_tx(d,usf_filter,switch_graph):
    '''
    The below function does the filtering of the '''

    usf_filter =8

# Upsampling such that original symbols are at every usf_filter th place
    Upsampled_signal = np.zeros(len(d)*usf_filter,dtype=complex)
    Upsampled_signal[::usf_filter]=d
    print(f'\033[32m\033[1mUp-sampled signal:\033[0m\033[0m {Upsampled_signal}')

# Ideal low pass filter is rectangular filter in frequency domain and sinc in time domain
    cut_off = 1/ (2 * usf_filter)
    t=np.arange(-100,101)
    ideal_LPFilter = np.sinc(2 * cut_off * t)
    ideal_LPFilter = ideal_LPFilter / np.sum(ideal_LPFilter)
    plt.figure(figsize=(6,6))
    plt.plot(t,ideal_LPFilter)
    plt.grid(True)
    plt.show()


# Filtered signal generated by convolution with sinc
    filtered_signal = np.convolve(Upsampled_signal,ideal_LPFilter, mode='full')
    print(f'\033[32m\033[1mFiltered Signal:\033[0m\033[0m {filtered_signal} ')
# Normalize signal power to 1
    power = np.mean(np.abs(filtered_signal) ** 2)
    filtered_signal = filtered_signal / np.sqrt(power)  # Normalize to unit power
    print(f'\033[32m\033[1mFiltered Signal (After Normalization):\033[0m\033[0m {filtered_signal}')

    if switch_graph.upper() == 'ON':
        plt.figure(figsize=(10, 6))
        plt.plot(np.real(filtered_signal), label='Real part')
        plt.plot(np.imag(filtered_signal), label='Imaginary part')
        plt.title("Filtered Signal (Low-pass Filter)")
        plt.xlabel("Sample Index")
        plt.ylabel("Amplitude")
        plt.legend()
        plt.grid(True)
        plt.show()
    else:
        pass

    return filtered_signal